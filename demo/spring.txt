spring 
    - 서버단 작성(backend)
       - spring framework : 웹 개발할 때 주로 사용 / 설정 작업 필요 / 
       - spring boot : spring framework 의 간편화 버전

프로젝트 생성
1. 빌드 툴 생성 [build : 프로젝트 생성, 라이브러리 설정, 코드작업, 컴파일, 테스트, 패키지작성, 배포]
- 빌드 툴 : build 작업을 도와주는 툴
    1. gradle : text 기반, maven보다 후에 출시 -> maven 개선, 
    2. maven : XML 기반[XML : HTML처럼 태그 사용, 단 태그를 만들어서 사용한다], 

2. spring boot version 선택 : 3.4.4

3. 언어 선택 : java

4. 패키지명 : com.example.demo(패키지명은 상관없으나 기본적으로 3개씩은 사용해야함)

5. 패키징타입 : jar(자바 압축파일) or war(자바 웹 압축파일 [-jsp])

6. 언어 버전 선택 : 부트버전에 따라서 선택이 달라질 수 있음

7. 필요 라이브러리 선택 : 선택한 라이브러리들은 pom.xml에 반영되있음
    - Spring Web
    - dev tools
    - thymeleaf
    - lombok
    - 추가 예정 : pom.xml -> Add Spring boot Starters ... ctrl + click
---------------------------------------------------------------------------------------------------

화면(front) 단 작성 : html + css + javascript + java 
- jsp 활용 여부 (front에 java 표현 시) : *.jsp
    - html 코드와 java코드 동시 작성이 가능
    - Spring boot에서 jsp를 사용하기 위해서는 설정 작업이 필요

- 템플릿 엔진 활용 : *.html
    - thymeleaf 사용 중 
    - 그 외 : mustache, groovy, freemaker, velocity, ...

- 스프링 주요 개념
    - IoC(Inversion of Control) : 메소드나 객체의 호출 작업을 개발자가 결정하는 것이 아니라 외부(스프링컨테이너)에서 결정(제어의 역전) 
    
    class A() {
        
    }
    class B() {
        A obj = new A(); <- 스프링컨테이너에서 해줌
    }
    - 컨테이너는 어느 객체를 생성할 것인지 알아야 함 => 어노테이션으로 알려주기
    - 컨테이너가 생성한 객체 : bean
    - 싱글톤 방식으로 객체 생성 [싱글톤 : 객체는 하나만 생성]
    - 어노테이션 : @Controller, @Service, @Component

- 경로 임의 생성
    - http://localhost:8080/ ==> Controller 파일의 메소드와 매핑
    
    - url 설계
        - ex | 게시글 작성 : /board/create
             | 게시글 목록 : /board/list
             | 게시글 조회 : /board/read
             | 게시글 수정 : /board/update
        
        @RequestMapping("/board")
        @GetMapping("/create")
        public String method(){ 
            return "info";
        } 
        

        @GetMapping("/update")
        public void method(){

        } 
        String Controller
        -> http://localhost:8080/board/create 브라우저요청 => 무언가 => Controller 응답 => templates 찾기(templates/return 값)
        => templates/info.html 작성

        void Controller
        -> http://localhost:8080/board/update 브라우저요청 => 무언가 => Controller 응답 => templates 찾기(templates/board/update)
        => templates/board/update.html