관계설정 annotation
    1. @ManyToOne : N:1 관계
                  : 정보를 가지고 나올 때 관련 있는 테이블 정보를 가지고 나옴(Left join)
                  : FetctType.EAGER 인 상태(즉시)

    2. @OneToMany : 정보를 가지고 나올 때 관련 있는 테이블 정보를 안 가지고 나옴
                  : FetchType.LAZY 인 상태(게으름)

    3. @OneToOne  : 1대1 관계 
                  : 정보를 가지고 나올 때 관련 있는 테이블 정보를 가지고 나옴(Left join)
                  : FetchType.EAGER 인 상태
    
    4. ManyToMany : N:M 관계 (@ManyToOne 관계로 변경 후 사용)
                    -> 관계 릴레이션 생성 후 그 릴레이션에 1:N 2개 걸어버림
                  : 실제 업무 환경에서는 잘 사용되지 않음
                  : FetchType.LAZY 인 상태

        끝이 One이면 EAGER / 끝이 Many면 LAZY임

EAGER에는 단점이 있음
        EAGER인 애를 LAZY로 바꾸는 방법 
    
    양방향 관계는 없음 : 단방향 2개를 여는 것
    데이터베이스 테이블은 외래 키 하나로 양쪽이 서로 조인 가능 => 객체는 한쪽만 관계 설정을 하면 X
    단방향 2개를 여는 대신에 주인관계가 어디인지를 mappedBy로 명시해야함
    장점 : 조회 방법이 하나 더 생김
        ex : 부서 조회시 부서에 속한 모든 사원 정보 조회

프록시(Proxy) : 프록시를 통해 연관된 객체를 실제 사용하는 시점에 데이터베이스에서 조회하도록 함(지연로딩)
               자주 함께 사용하는 객체들은 조인을 통해서 함께 조회(즉시로딩)
    FetchType.LAZY(지연로딩)
    FetchType.EAGER(즉시로딩) 두개는 여기서 사용된다.


FetchType.LAZY 일 때 관련있는 테이블 정보를 접근 한다면 LazyInitiallizationException 발생

영속성 관리 
    - 양방향일 때 사용할 수 있는 개념
    - JPA에서 관리해준다는 의미. 영속이 아닌 엔티티는 JPA에서 관리하지 않는다는 뜻
    - 엔티티는 영속성상태에 있어야 삽입, 삭제, 수정 가능
    - 부모 저장 시 자식 엔티티도 같이 저장
        @OneToMany(mappedBy = "parent", cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, orphanRemoval = true)
            - cascade = {CascadeType.PERSIST, CascadeType.REMOVE} : 부모 저장, 삭제 시 자식도 같이 작업이 일어나는 상황 = "자식에게 영속성을 전이함"

        부모 객체에서 자식 객체를 제거(고아객체)하면 자식객체가 제거 : orphanRemoval = true


